on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'verbose'
  push:
    branches:
    - main
  pull_request:

env:
  AZURE_FUNCTIONAPP_NAME: aa-eun-dev-availableapi-function  # set this to your application's name
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'    # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '6.0.100'              # set this to the dotnet version to use
jobs:
  # terraform:
  #   name: 'Terraform'
  #   env:
  #     ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
  #     ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
  #     ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #     ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
  #   runs-on: ubuntu-latest
  #   environment: dev
 
  #   # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: "./infrastructure"
 
  #   steps:
  #   # Checkout the repository to the GitHub Actions runner
  #   - name: Checkout
  #     uses: actions/checkout@v2
    
  #   - uses: hashicorp/setup-terraform@v1.3.2
  #     with:
  #       terraform_version: "~1.0"
  #       terraform_wrapper: false
    
  #   - name: Terraform fmt
  #     id: fmt
  #     run: terraform fmt -check
  #     continue-on-error: false

  #   - name: Terraform Init
  #     id: init
  #     run: terraform init -input=false -backend-config='storage_account_name=${{ secrets.STORAGE_ACCOUNT_NAME}}' -backend-config='container_name=dev-tfstate' -backend-config='key=dev.tfstate' -backend-config='access_key=${{ secrets.ACCESS_KEY}}'

  #   - name: Terraform Validate
  #     id: validate
  #     run: terraform validate

  #   - name: Set up Python 3.8
  #     uses: actions/setup-python@v1
  #     with:
  #       python-version: 3.8
  #   - name: Test with Checkov
  #     id: checkov
  #     uses: bridgecrewio/checkov-action@master
  #     with:
  #       directory: .
  #       framework: terraform 
  #       quiet: true
  #       soft_fail: true

  #   - name: Terraform Plan
  #     id: plan
  #     run: terraform plan -no-color -var-file=dev.tfvars
  #     continue-on-error: false

  #   - uses: actions/github-script@0.9.0
  #     if: github.event_name == 'pull_request'
  #     env:
  #       PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
  #     with:
  #       github-token: ${{ secrets.GITHUB_TOKEN }}
  #       script: |
  #         const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
  #         #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
  #         #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
  #         #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
  #         <details><summary>Show Plan</summary>
          
  #         \`\`\`\n
  #         ${process.env.PLAN}
  #         \`\`\`
          
  #         </details>
          
  #         *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
  #         github.issues.createComment({
  #           issue_number: context.issue.number,
  #           owner: context.repo.owner,
  #           repo: context.repo.repo,
  #           body: output
  #         })
 
  #   - name: Terraform Apply
  #     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #     id: apply
  #     run: terraform apply --var-file=dev.tfvars --auto-approve
  #     continue-on-error: false

  build-and-deploy:
    #needs: terraform
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@main

    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Resolve Project Dependencies Using Dotnet'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        dotnet build --configuration Release --output ./output
        popd
        
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }}

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}